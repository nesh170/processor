// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2016 18:02:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          subtractor_32bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module subtractor_32bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in_A;
reg [31:0] in_B;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
subtractor_32bit i1 (
// port map - connection between master ports and signals/registers   
	.in_A(in_A),
	.in_B(in_B),
	.out(out)
);
initial 
begin 
#1000000 $finish;
end 
// in_A[ 31 ]
initial
begin
	in_A[31] = 1'b0;
	in_A[31] = #30000 1'b1;
	in_A[31] = #40000 1'b0;
end 
// in_A[ 30 ]
initial
begin
	in_A[30] = 1'b0;
	in_A[30] = #30000 1'b1;
	in_A[30] = #40000 1'b0;
	in_A[30] = #80000 1'b1;
	in_A[30] = #80000 1'b0;
	in_A[30] = #70000 1'b1;
	in_A[30] = #60000 1'b0;
	in_A[30] = #60000 1'b1;
	in_A[30] = #60000 1'b0;
end 
// in_A[ 29 ]
initial
begin
	in_A[29] = 1'b0;
	in_A[29] = #30000 1'b1;
	in_A[29] = #40000 1'b0;
	in_A[29] = #80000 1'b1;
	in_A[29] = #80000 1'b0;
	in_A[29] = #70000 1'b1;
	in_A[29] = #60000 1'b0;
	in_A[29] = #60000 1'b1;
	in_A[29] = #60000 1'b0;
end 
// in_A[ 28 ]
initial
begin
	in_A[28] = 1'b0;
	in_A[28] = #30000 1'b1;
	in_A[28] = #40000 1'b0;
	in_A[28] = #80000 1'b1;
	in_A[28] = #80000 1'b0;
	in_A[28] = #70000 1'b1;
	in_A[28] = #60000 1'b0;
	in_A[28] = #60000 1'b1;
	in_A[28] = #60000 1'b0;
end 
// in_A[ 27 ]
initial
begin
	in_A[27] = 1'b0;
	in_A[27] = #30000 1'b1;
	in_A[27] = #40000 1'b0;
	in_A[27] = #80000 1'b1;
	in_A[27] = #80000 1'b0;
	in_A[27] = #70000 1'b1;
	in_A[27] = #60000 1'b0;
	in_A[27] = #60000 1'b1;
	in_A[27] = #60000 1'b0;
end 
// in_A[ 26 ]
initial
begin
	in_A[26] = 1'b0;
	in_A[26] = #30000 1'b1;
	in_A[26] = #40000 1'b0;
	in_A[26] = #80000 1'b1;
	in_A[26] = #80000 1'b0;
	in_A[26] = #70000 1'b1;
	in_A[26] = #60000 1'b0;
	in_A[26] = #60000 1'b1;
	in_A[26] = #60000 1'b0;
end 
// in_A[ 25 ]
initial
begin
	in_A[25] = 1'b0;
	in_A[25] = #30000 1'b1;
	in_A[25] = #40000 1'b0;
	in_A[25] = #80000 1'b1;
	in_A[25] = #80000 1'b0;
	in_A[25] = #70000 1'b1;
	in_A[25] = #60000 1'b0;
	in_A[25] = #60000 1'b1;
	in_A[25] = #60000 1'b0;
end 
// in_A[ 24 ]
initial
begin
	in_A[24] = 1'b0;
	in_A[24] = #30000 1'b1;
	in_A[24] = #40000 1'b0;
	in_A[24] = #80000 1'b1;
	in_A[24] = #80000 1'b0;
	in_A[24] = #70000 1'b1;
	in_A[24] = #60000 1'b0;
	in_A[24] = #60000 1'b1;
	in_A[24] = #60000 1'b0;
end 
// in_A[ 23 ]
initial
begin
	in_A[23] = 1'b0;
	in_A[23] = #30000 1'b1;
	in_A[23] = #40000 1'b0;
	in_A[23] = #80000 1'b1;
	in_A[23] = #80000 1'b0;
	in_A[23] = #70000 1'b1;
	in_A[23] = #60000 1'b0;
	in_A[23] = #60000 1'b1;
	in_A[23] = #60000 1'b0;
end 
// in_A[ 22 ]
initial
begin
	in_A[22] = 1'b0;
	in_A[22] = #30000 1'b1;
	in_A[22] = #40000 1'b0;
	in_A[22] = #80000 1'b1;
	in_A[22] = #80000 1'b0;
	in_A[22] = #70000 1'b1;
	in_A[22] = #60000 1'b0;
	in_A[22] = #60000 1'b1;
	in_A[22] = #60000 1'b0;
end 
// in_A[ 21 ]
initial
begin
	in_A[21] = 1'b0;
	in_A[21] = #30000 1'b1;
	in_A[21] = #40000 1'b0;
	in_A[21] = #80000 1'b1;
	in_A[21] = #80000 1'b0;
	in_A[21] = #70000 1'b1;
	in_A[21] = #60000 1'b0;
	in_A[21] = #60000 1'b1;
	in_A[21] = #60000 1'b0;
end 
// in_A[ 20 ]
initial
begin
	in_A[20] = 1'b0;
	in_A[20] = #30000 1'b1;
	in_A[20] = #40000 1'b0;
	in_A[20] = #80000 1'b1;
	in_A[20] = #80000 1'b0;
	in_A[20] = #70000 1'b1;
	in_A[20] = #60000 1'b0;
	in_A[20] = #60000 1'b1;
	in_A[20] = #60000 1'b0;
end 
// in_A[ 19 ]
initial
begin
	in_A[19] = 1'b0;
	in_A[19] = #30000 1'b1;
	in_A[19] = #40000 1'b0;
	in_A[19] = #80000 1'b1;
	in_A[19] = #80000 1'b0;
	in_A[19] = #70000 1'b1;
	in_A[19] = #60000 1'b0;
	in_A[19] = #60000 1'b1;
	in_A[19] = #60000 1'b0;
end 
// in_A[ 18 ]
initial
begin
	in_A[18] = 1'b0;
	in_A[18] = #30000 1'b1;
	in_A[18] = #40000 1'b0;
	in_A[18] = #80000 1'b1;
	in_A[18] = #80000 1'b0;
	in_A[18] = #70000 1'b1;
	in_A[18] = #60000 1'b0;
	in_A[18] = #60000 1'b1;
	in_A[18] = #60000 1'b0;
end 
// in_A[ 17 ]
initial
begin
	in_A[17] = 1'b0;
	in_A[17] = #30000 1'b1;
	in_A[17] = #40000 1'b0;
	in_A[17] = #80000 1'b1;
	in_A[17] = #80000 1'b0;
	in_A[17] = #70000 1'b1;
	in_A[17] = #60000 1'b0;
	in_A[17] = #60000 1'b1;
	in_A[17] = #60000 1'b0;
end 
// in_A[ 16 ]
initial
begin
	in_A[16] = 1'b0;
	in_A[16] = #30000 1'b1;
	in_A[16] = #40000 1'b0;
	in_A[16] = #80000 1'b1;
	in_A[16] = #80000 1'b0;
	in_A[16] = #70000 1'b1;
	in_A[16] = #60000 1'b0;
	in_A[16] = #60000 1'b1;
	in_A[16] = #60000 1'b0;
end 
// in_A[ 15 ]
initial
begin
	in_A[15] = 1'b0;
	in_A[15] = #30000 1'b1;
	in_A[15] = #40000 1'b0;
	in_A[15] = #80000 1'b1;
	in_A[15] = #80000 1'b0;
	in_A[15] = #70000 1'b1;
	in_A[15] = #60000 1'b0;
	in_A[15] = #60000 1'b1;
	in_A[15] = #60000 1'b0;
end 
// in_A[ 14 ]
initial
begin
	in_A[14] = 1'b0;
	in_A[14] = #30000 1'b1;
	in_A[14] = #40000 1'b0;
	in_A[14] = #80000 1'b1;
	in_A[14] = #80000 1'b0;
	in_A[14] = #70000 1'b1;
	in_A[14] = #60000 1'b0;
	in_A[14] = #60000 1'b1;
	in_A[14] = #60000 1'b0;
end 
// in_A[ 13 ]
initial
begin
	in_A[13] = 1'b0;
	in_A[13] = #30000 1'b1;
	in_A[13] = #40000 1'b0;
	in_A[13] = #80000 1'b1;
	in_A[13] = #80000 1'b0;
	in_A[13] = #70000 1'b1;
	in_A[13] = #60000 1'b0;
	in_A[13] = #60000 1'b1;
	in_A[13] = #60000 1'b0;
end 
// in_A[ 12 ]
initial
begin
	in_A[12] = 1'b0;
	in_A[12] = #30000 1'b1;
	in_A[12] = #40000 1'b0;
	in_A[12] = #80000 1'b1;
	in_A[12] = #80000 1'b0;
	in_A[12] = #70000 1'b1;
	in_A[12] = #60000 1'b0;
	in_A[12] = #60000 1'b1;
	in_A[12] = #60000 1'b0;
end 
// in_A[ 11 ]
initial
begin
	in_A[11] = 1'b0;
	in_A[11] = #30000 1'b1;
	in_A[11] = #40000 1'b0;
	in_A[11] = #80000 1'b1;
	in_A[11] = #80000 1'b0;
	in_A[11] = #70000 1'b1;
	in_A[11] = #60000 1'b0;
	in_A[11] = #60000 1'b1;
	in_A[11] = #60000 1'b0;
end 
// in_A[ 10 ]
initial
begin
	in_A[10] = 1'b0;
	in_A[10] = #30000 1'b1;
	in_A[10] = #40000 1'b0;
	in_A[10] = #80000 1'b1;
	in_A[10] = #80000 1'b0;
	in_A[10] = #70000 1'b1;
	in_A[10] = #60000 1'b0;
	in_A[10] = #60000 1'b1;
	in_A[10] = #60000 1'b0;
end 
// in_A[ 9 ]
initial
begin
	in_A[9] = 1'b0;
	in_A[9] = #30000 1'b1;
	in_A[9] = #40000 1'b0;
	in_A[9] = #80000 1'b1;
	in_A[9] = #80000 1'b0;
	in_A[9] = #70000 1'b1;
	in_A[9] = #60000 1'b0;
	in_A[9] = #60000 1'b1;
	in_A[9] = #60000 1'b0;
end 
// in_A[ 8 ]
initial
begin
	in_A[8] = 1'b0;
	in_A[8] = #30000 1'b1;
	in_A[8] = #40000 1'b0;
	in_A[8] = #80000 1'b1;
	in_A[8] = #80000 1'b0;
	in_A[8] = #70000 1'b1;
	in_A[8] = #60000 1'b0;
	in_A[8] = #60000 1'b1;
	in_A[8] = #60000 1'b0;
end 
// in_A[ 7 ]
initial
begin
	in_A[7] = 1'b0;
	in_A[7] = #30000 1'b1;
	in_A[7] = #40000 1'b0;
	in_A[7] = #80000 1'b1;
	in_A[7] = #80000 1'b0;
	in_A[7] = #70000 1'b1;
	in_A[7] = #60000 1'b0;
	in_A[7] = #60000 1'b1;
	in_A[7] = #60000 1'b0;
end 
// in_A[ 6 ]
initial
begin
	in_A[6] = 1'b0;
	in_A[6] = #30000 1'b1;
	in_A[6] = #40000 1'b0;
	in_A[6] = #80000 1'b1;
	in_A[6] = #80000 1'b0;
	in_A[6] = #70000 1'b1;
	in_A[6] = #60000 1'b0;
	in_A[6] = #60000 1'b1;
	in_A[6] = #60000 1'b0;
end 
// in_A[ 5 ]
initial
begin
	in_A[5] = 1'b0;
	in_A[5] = #30000 1'b1;
	in_A[5] = #40000 1'b0;
	in_A[5] = #40000 1'b1;
	in_A[5] = #120000 1'b0;
	in_A[5] = #70000 1'b1;
	in_A[5] = #60000 1'b0;
	in_A[5] = #60000 1'b1;
	in_A[5] = #60000 1'b0;
end 
// in_A[ 4 ]
initial
begin
	in_A[4] = 1'b0;
	in_A[4] = #30000 1'b1;
	in_A[4] = #40000 1'b0;
	in_A[4] = #80000 1'b1;
	in_A[4] = #80000 1'b0;
	in_A[4] = #70000 1'b1;
	in_A[4] = #60000 1'b0;
	in_A[4] = #60000 1'b1;
	in_A[4] = #60000 1'b0;
end 
// in_A[ 3 ]
initial
begin
	in_A[3] = 1'b0;
	in_A[3] = #30000 1'b1;
	in_A[3] = #40000 1'b0;
	in_A[3] = #80000 1'b1;
	in_A[3] = #80000 1'b0;
	in_A[3] = #70000 1'b1;
	in_A[3] = #60000 1'b0;
	in_A[3] = #60000 1'b1;
	in_A[3] = #60000 1'b0;
end 
// in_A[ 2 ]
initial
begin
	in_A[2] = 1'b0;
	in_A[2] = #30000 1'b1;
	in_A[2] = #80000 1'b0;
	in_A[2] = #40000 1'b1;
	in_A[2] = #80000 1'b0;
	in_A[2] = #70000 1'b1;
	in_A[2] = #60000 1'b0;
	in_A[2] = #60000 1'b1;
	in_A[2] = #60000 1'b0;
end 
// in_A[ 1 ]
initial
begin
	in_A[1] = 1'b0;
	in_A[1] = #30000 1'b1;
	in_A[1] = #40000 1'b0;
	in_A[1] = #80000 1'b1;
	in_A[1] = #80000 1'b0;
	in_A[1] = #70000 1'b1;
	in_A[1] = #60000 1'b0;
	in_A[1] = #60000 1'b1;
	in_A[1] = #60000 1'b0;
end 
// in_A[ 0 ]
initial
begin
	in_A[0] = 1'b1;
	in_A[0] = #110000 1'b0;
	in_A[0] = #40000 1'b1;
	in_A[0] = #210000 1'b0;
end 
// in_B[ 31 ]
initial
begin
	in_B[31] = 1'b0;
	in_B[31] = #30000 1'b1;
	in_B[31] = #40000 1'b0;
	in_B[31] = #80000 1'b1;
	in_B[31] = #80000 1'b0;
	in_B[31] = #130000 1'b1;
	in_B[31] = #60000 1'b0;
end 
// in_B[ 30 ]
initial
begin
	in_B[30] = 1'b0;
	in_B[30] = #30000 1'b1;
	in_B[30] = #40000 1'b0;
	in_B[30] = #80000 1'b1;
	in_B[30] = #80000 1'b0;
	in_B[30] = #70000 1'b1;
	in_B[30] = #60000 1'b0;
	in_B[30] = #60000 1'b1;
	in_B[30] = #60000 1'b0;
end 
// in_B[ 29 ]
initial
begin
	in_B[29] = 1'b0;
	in_B[29] = #30000 1'b1;
	in_B[29] = #40000 1'b0;
	in_B[29] = #80000 1'b1;
	in_B[29] = #80000 1'b0;
	in_B[29] = #70000 1'b1;
	in_B[29] = #60000 1'b0;
	in_B[29] = #60000 1'b1;
	in_B[29] = #60000 1'b0;
end 
// in_B[ 28 ]
initial
begin
	in_B[28] = 1'b0;
	in_B[28] = #30000 1'b1;
	in_B[28] = #40000 1'b0;
	in_B[28] = #80000 1'b1;
	in_B[28] = #80000 1'b0;
	in_B[28] = #70000 1'b1;
	in_B[28] = #60000 1'b0;
	in_B[28] = #60000 1'b1;
	in_B[28] = #60000 1'b0;
end 
// in_B[ 27 ]
initial
begin
	in_B[27] = 1'b0;
	in_B[27] = #30000 1'b1;
	in_B[27] = #40000 1'b0;
	in_B[27] = #80000 1'b1;
	in_B[27] = #80000 1'b0;
	in_B[27] = #70000 1'b1;
	in_B[27] = #60000 1'b0;
	in_B[27] = #60000 1'b1;
	in_B[27] = #60000 1'b0;
end 
// in_B[ 26 ]
initial
begin
	in_B[26] = 1'b0;
	in_B[26] = #30000 1'b1;
	in_B[26] = #40000 1'b0;
	in_B[26] = #80000 1'b1;
	in_B[26] = #80000 1'b0;
	in_B[26] = #70000 1'b1;
	in_B[26] = #60000 1'b0;
	in_B[26] = #60000 1'b1;
	in_B[26] = #60000 1'b0;
end 
// in_B[ 25 ]
initial
begin
	in_B[25] = 1'b0;
	in_B[25] = #30000 1'b1;
	in_B[25] = #40000 1'b0;
	in_B[25] = #80000 1'b1;
	in_B[25] = #80000 1'b0;
	in_B[25] = #70000 1'b1;
	in_B[25] = #60000 1'b0;
	in_B[25] = #60000 1'b1;
	in_B[25] = #60000 1'b0;
end 
// in_B[ 24 ]
initial
begin
	in_B[24] = 1'b0;
	in_B[24] = #30000 1'b1;
	in_B[24] = #40000 1'b0;
	in_B[24] = #80000 1'b1;
	in_B[24] = #80000 1'b0;
	in_B[24] = #70000 1'b1;
	in_B[24] = #60000 1'b0;
	in_B[24] = #60000 1'b1;
	in_B[24] = #60000 1'b0;
end 
// in_B[ 23 ]
initial
begin
	in_B[23] = 1'b0;
	in_B[23] = #30000 1'b1;
	in_B[23] = #40000 1'b0;
	in_B[23] = #80000 1'b1;
	in_B[23] = #80000 1'b0;
	in_B[23] = #70000 1'b1;
	in_B[23] = #60000 1'b0;
	in_B[23] = #60000 1'b1;
	in_B[23] = #60000 1'b0;
end 
// in_B[ 22 ]
initial
begin
	in_B[22] = 1'b0;
	in_B[22] = #30000 1'b1;
	in_B[22] = #40000 1'b0;
	in_B[22] = #80000 1'b1;
	in_B[22] = #80000 1'b0;
	in_B[22] = #70000 1'b1;
	in_B[22] = #60000 1'b0;
	in_B[22] = #60000 1'b1;
	in_B[22] = #60000 1'b0;
end 
// in_B[ 21 ]
initial
begin
	in_B[21] = 1'b0;
	in_B[21] = #30000 1'b1;
	in_B[21] = #40000 1'b0;
	in_B[21] = #80000 1'b1;
	in_B[21] = #80000 1'b0;
	in_B[21] = #70000 1'b1;
	in_B[21] = #60000 1'b0;
	in_B[21] = #60000 1'b1;
	in_B[21] = #60000 1'b0;
end 
// in_B[ 20 ]
initial
begin
	in_B[20] = 1'b0;
	in_B[20] = #30000 1'b1;
	in_B[20] = #40000 1'b0;
	in_B[20] = #80000 1'b1;
	in_B[20] = #80000 1'b0;
	in_B[20] = #70000 1'b1;
	in_B[20] = #60000 1'b0;
	in_B[20] = #60000 1'b1;
	in_B[20] = #60000 1'b0;
end 
// in_B[ 19 ]
initial
begin
	in_B[19] = 1'b0;
	in_B[19] = #30000 1'b1;
	in_B[19] = #40000 1'b0;
	in_B[19] = #80000 1'b1;
	in_B[19] = #80000 1'b0;
	in_B[19] = #70000 1'b1;
	in_B[19] = #60000 1'b0;
	in_B[19] = #60000 1'b1;
	in_B[19] = #60000 1'b0;
end 
// in_B[ 18 ]
initial
begin
	in_B[18] = 1'b0;
	in_B[18] = #30000 1'b1;
	in_B[18] = #40000 1'b0;
	in_B[18] = #80000 1'b1;
	in_B[18] = #80000 1'b0;
	in_B[18] = #70000 1'b1;
	in_B[18] = #60000 1'b0;
	in_B[18] = #60000 1'b1;
	in_B[18] = #60000 1'b0;
end 
// in_B[ 17 ]
initial
begin
	in_B[17] = 1'b0;
	in_B[17] = #30000 1'b1;
	in_B[17] = #40000 1'b0;
	in_B[17] = #80000 1'b1;
	in_B[17] = #80000 1'b0;
	in_B[17] = #70000 1'b1;
	in_B[17] = #60000 1'b0;
	in_B[17] = #60000 1'b1;
	in_B[17] = #60000 1'b0;
end 
// in_B[ 16 ]
initial
begin
	in_B[16] = 1'b0;
	in_B[16] = #30000 1'b1;
	in_B[16] = #40000 1'b0;
	in_B[16] = #80000 1'b1;
	in_B[16] = #80000 1'b0;
	in_B[16] = #70000 1'b1;
	in_B[16] = #60000 1'b0;
	in_B[16] = #60000 1'b1;
	in_B[16] = #60000 1'b0;
end 
// in_B[ 15 ]
initial
begin
	in_B[15] = 1'b0;
	in_B[15] = #30000 1'b1;
	in_B[15] = #40000 1'b0;
	in_B[15] = #80000 1'b1;
	in_B[15] = #80000 1'b0;
	in_B[15] = #70000 1'b1;
	in_B[15] = #60000 1'b0;
	in_B[15] = #60000 1'b1;
	in_B[15] = #60000 1'b0;
end 
// in_B[ 14 ]
initial
begin
	in_B[14] = 1'b0;
	in_B[14] = #30000 1'b1;
	in_B[14] = #40000 1'b0;
	in_B[14] = #80000 1'b1;
	in_B[14] = #80000 1'b0;
	in_B[14] = #70000 1'b1;
	in_B[14] = #60000 1'b0;
	in_B[14] = #60000 1'b1;
	in_B[14] = #60000 1'b0;
end 
// in_B[ 13 ]
initial
begin
	in_B[13] = 1'b0;
	in_B[13] = #30000 1'b1;
	in_B[13] = #40000 1'b0;
	in_B[13] = #80000 1'b1;
	in_B[13] = #80000 1'b0;
	in_B[13] = #70000 1'b1;
	in_B[13] = #60000 1'b0;
	in_B[13] = #60000 1'b1;
	in_B[13] = #60000 1'b0;
end 
// in_B[ 12 ]
initial
begin
	in_B[12] = 1'b0;
	in_B[12] = #30000 1'b1;
	in_B[12] = #40000 1'b0;
	in_B[12] = #80000 1'b1;
	in_B[12] = #80000 1'b0;
	in_B[12] = #70000 1'b1;
	in_B[12] = #60000 1'b0;
	in_B[12] = #60000 1'b1;
	in_B[12] = #60000 1'b0;
end 
// in_B[ 11 ]
initial
begin
	in_B[11] = 1'b0;
	in_B[11] = #30000 1'b1;
	in_B[11] = #40000 1'b0;
	in_B[11] = #80000 1'b1;
	in_B[11] = #80000 1'b0;
	in_B[11] = #70000 1'b1;
	in_B[11] = #60000 1'b0;
	in_B[11] = #60000 1'b1;
	in_B[11] = #60000 1'b0;
end 
// in_B[ 10 ]
initial
begin
	in_B[10] = 1'b0;
	in_B[10] = #30000 1'b1;
	in_B[10] = #40000 1'b0;
	in_B[10] = #80000 1'b1;
	in_B[10] = #80000 1'b0;
	in_B[10] = #70000 1'b1;
	in_B[10] = #60000 1'b0;
	in_B[10] = #60000 1'b1;
	in_B[10] = #60000 1'b0;
end 
// in_B[ 9 ]
initial
begin
	in_B[9] = 1'b0;
	in_B[9] = #30000 1'b1;
	in_B[9] = #40000 1'b0;
	in_B[9] = #80000 1'b1;
	in_B[9] = #80000 1'b0;
	in_B[9] = #70000 1'b1;
	in_B[9] = #60000 1'b0;
	in_B[9] = #60000 1'b1;
	in_B[9] = #60000 1'b0;
end 
// in_B[ 8 ]
initial
begin
	in_B[8] = 1'b0;
	in_B[8] = #30000 1'b1;
	in_B[8] = #40000 1'b0;
	in_B[8] = #80000 1'b1;
	in_B[8] = #80000 1'b0;
	in_B[8] = #70000 1'b1;
	in_B[8] = #60000 1'b0;
	in_B[8] = #60000 1'b1;
	in_B[8] = #60000 1'b0;
end 
// in_B[ 7 ]
initial
begin
	in_B[7] = 1'b0;
	in_B[7] = #30000 1'b1;
	in_B[7] = #40000 1'b0;
	in_B[7] = #80000 1'b1;
	in_B[7] = #80000 1'b0;
	in_B[7] = #70000 1'b1;
	in_B[7] = #60000 1'b0;
	in_B[7] = #60000 1'b1;
	in_B[7] = #60000 1'b0;
end 
// in_B[ 6 ]
initial
begin
	in_B[6] = 1'b0;
	in_B[6] = #30000 1'b1;
	in_B[6] = #40000 1'b0;
	in_B[6] = #80000 1'b1;
	in_B[6] = #80000 1'b0;
	in_B[6] = #70000 1'b1;
	in_B[6] = #60000 1'b0;
	in_B[6] = #60000 1'b1;
	in_B[6] = #60000 1'b0;
end 
// in_B[ 5 ]
initial
begin
	in_B[5] = 1'b0;
	in_B[5] = #30000 1'b1;
	in_B[5] = #40000 1'b0;
	in_B[5] = #40000 1'b1;
	in_B[5] = #120000 1'b0;
	in_B[5] = #70000 1'b1;
	in_B[5] = #60000 1'b0;
	in_B[5] = #60000 1'b1;
	in_B[5] = #60000 1'b0;
end 
// in_B[ 4 ]
initial
begin
	in_B[4] = 1'b0;
	in_B[4] = #30000 1'b1;
	in_B[4] = #40000 1'b0;
	in_B[4] = #80000 1'b1;
	in_B[4] = #80000 1'b0;
	in_B[4] = #70000 1'b1;
	in_B[4] = #60000 1'b0;
	in_B[4] = #60000 1'b1;
	in_B[4] = #60000 1'b0;
end 
// in_B[ 3 ]
initial
begin
	in_B[3] = 1'b0;
	in_B[3] = #30000 1'b1;
	in_B[3] = #80000 1'b0;
	in_B[3] = #40000 1'b1;
	in_B[3] = #80000 1'b0;
	in_B[3] = #70000 1'b1;
	in_B[3] = #60000 1'b0;
	in_B[3] = #60000 1'b1;
	in_B[3] = #60000 1'b0;
end 
// in_B[ 2 ]
initial
begin
	in_B[2] = 1'b0;
	in_B[2] = #30000 1'b1;
	in_B[2] = #40000 1'b0;
	in_B[2] = #80000 1'b1;
	in_B[2] = #80000 1'b0;
	in_B[2] = #70000 1'b1;
	in_B[2] = #60000 1'b0;
	in_B[2] = #60000 1'b1;
	in_B[2] = #60000 1'b0;
end 
// in_B[ 1 ]
initial
begin
	in_B[1] = 1'b0;
	in_B[1] = #30000 1'b1;
	in_B[1] = #40000 1'b0;
	in_B[1] = #80000 1'b1;
	in_B[1] = #80000 1'b0;
	in_B[1] = #70000 1'b1;
	in_B[1] = #60000 1'b0;
	in_B[1] = #60000 1'b1;
	in_B[1] = #60000 1'b0;
end 
// in_B[ 0 ]
initial
begin
	in_B[0] = 1'b1;
	in_B[0] = #70000 1'b0;
	in_B[0] = #40000 1'b1;
	in_B[0] = #120000 1'b0;
end 
endmodule

