// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/29/2016 16:18:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          booth_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module booth_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] booth_operation;
reg [31:0] multiplicand;
// wires                                               
wire [31:0] adder_output;
wire carry_in;

// assign statements (if any)                          
booth_decoder i1 (
// port map - connection between master ports and signals/registers   
	.adder_output(adder_output),
	.booth_operation(booth_operation),
	.carry_in(carry_in),
	.multiplicand(multiplicand)
);
initial 
begin 
#1000000 $finish;
end 
// booth_operation[ 2 ]
initial
begin
	booth_operation[2] = 1'b0;
	booth_operation[2] = #470000 1'b1;
end 
// booth_operation[ 1 ]
initial
begin
	booth_operation[1] = 1'b0;
	booth_operation[1] = #210000 1'b1;
	booth_operation[1] = #260000 1'b0;
	booth_operation[1] = #280000 1'b1;
end 
// booth_operation[ 0 ]
initial
begin
	booth_operation[0] = 1'b0;
	booth_operation[0] = #110000 1'b1;
	booth_operation[0] = #100000 1'b0;
	booth_operation[0] = #130000 1'b1;
	booth_operation[0] = #130000 1'b0;
	booth_operation[0] = #130000 1'b1;
	booth_operation[0] = #150000 1'b0;
	booth_operation[0] = #170000 1'b1;
end 
// multiplicand[ 31 ]
initial
begin
	multiplicand[31] = 1'b0;
end 
// multiplicand[ 30 ]
initial
begin
	multiplicand[30] = 1'b0;
end 
// multiplicand[ 29 ]
initial
begin
	multiplicand[29] = 1'b0;
end 
// multiplicand[ 28 ]
initial
begin
	multiplicand[28] = 1'b0;
end 
// multiplicand[ 27 ]
initial
begin
	multiplicand[27] = 1'b0;
end 
// multiplicand[ 26 ]
initial
begin
	multiplicand[26] = 1'b0;
end 
// multiplicand[ 25 ]
initial
begin
	multiplicand[25] = 1'b0;
end 
// multiplicand[ 24 ]
initial
begin
	multiplicand[24] = 1'b0;
end 
// multiplicand[ 23 ]
initial
begin
	multiplicand[23] = 1'b0;
end 
// multiplicand[ 22 ]
initial
begin
	multiplicand[22] = 1'b0;
end 
// multiplicand[ 21 ]
initial
begin
	multiplicand[21] = 1'b0;
end 
// multiplicand[ 20 ]
initial
begin
	multiplicand[20] = 1'b0;
end 
// multiplicand[ 19 ]
initial
begin
	multiplicand[19] = 1'b0;
end 
// multiplicand[ 18 ]
initial
begin
	multiplicand[18] = 1'b0;
end 
// multiplicand[ 17 ]
initial
begin
	multiplicand[17] = 1'b0;
end 
// multiplicand[ 16 ]
initial
begin
	multiplicand[16] = 1'b0;
end 
// multiplicand[ 15 ]
initial
begin
	multiplicand[15] = 1'b0;
end 
// multiplicand[ 14 ]
initial
begin
	multiplicand[14] = 1'b0;
end 
// multiplicand[ 13 ]
initial
begin
	multiplicand[13] = 1'b0;
end 
// multiplicand[ 12 ]
initial
begin
	multiplicand[12] = 1'b0;
end 
// multiplicand[ 11 ]
initial
begin
	multiplicand[11] = 1'b0;
end 
// multiplicand[ 10 ]
initial
begin
	multiplicand[10] = 1'b0;
end 
// multiplicand[ 9 ]
initial
begin
	multiplicand[9] = 1'b0;
end 
// multiplicand[ 8 ]
initial
begin
	multiplicand[8] = 1'b0;
end 
// multiplicand[ 7 ]
initial
begin
	multiplicand[7] = 1'b0;
end 
// multiplicand[ 6 ]
initial
begin
	multiplicand[6] = 1'b0;
end 
// multiplicand[ 5 ]
initial
begin
	multiplicand[5] = 1'b0;
end 
// multiplicand[ 4 ]
initial
begin
	multiplicand[4] = 1'b0;
end 
// multiplicand[ 3 ]
initial
begin
	multiplicand[3] = 1'b1;
end 
// multiplicand[ 2 ]
initial
begin
	multiplicand[2] = 1'b0;
end 
// multiplicand[ 1 ]
initial
begin
	multiplicand[1] = 1'b0;
end 
// multiplicand[ 0 ]
initial
begin
	multiplicand[0] = 1'b1;
end 
endmodule

