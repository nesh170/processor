// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/08/2016 23:48:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] bitsIn;
reg clk;
reg reset;
reg writeEnable;
// wires                                               
wire [31:0] bitsOut;

// assign statements (if any)                          
register i1 (
// port map - connection between master ports and signals/registers   
	.bitsIn(bitsIn),
	.bitsOut(bitsOut),
	.clk(clk),
	.reset(reset),
	.writeEnable(writeEnable)
);
initial 
begin 
#1000000 $finish;
end 

// writeEnable
initial
begin
	writeEnable = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// bitsIn[ 31 ]
initial
begin
	bitsIn[31] = 1'b0;
end 
// bitsIn[ 30 ]
initial
begin
	bitsIn[30] = 1'b0;
end 
// bitsIn[ 29 ]
initial
begin
	bitsIn[29] = 1'b0;
end 
// bitsIn[ 28 ]
initial
begin
	bitsIn[28] = 1'b0;
end 
// bitsIn[ 27 ]
initial
begin
	bitsIn[27] = 1'b0;
end 
// bitsIn[ 26 ]
initial
begin
	bitsIn[26] = 1'b0;
end 
// bitsIn[ 25 ]
initial
begin
	bitsIn[25] = 1'b0;
end 
// bitsIn[ 24 ]
initial
begin
	bitsIn[24] = 1'b0;
end 
// bitsIn[ 23 ]
initial
begin
	bitsIn[23] = 1'b0;
end 
// bitsIn[ 22 ]
initial
begin
	bitsIn[22] = 1'b1;
end 
// bitsIn[ 21 ]
initial
begin
	bitsIn[21] = 1'b0;
end 
// bitsIn[ 20 ]
initial
begin
	bitsIn[20] = 1'b0;
end 
// bitsIn[ 19 ]
initial
begin
	bitsIn[19] = 1'b0;
end 
// bitsIn[ 18 ]
initial
begin
	bitsIn[18] = 1'b0;
end 
// bitsIn[ 17 ]
initial
begin
	bitsIn[17] = 1'b0;
end 
// bitsIn[ 16 ]
initial
begin
	bitsIn[16] = 1'b0;
end 
// bitsIn[ 15 ]
initial
begin
	bitsIn[15] = 1'b0;
end 
// bitsIn[ 14 ]
initial
begin
	bitsIn[14] = 1'b0;
end 
// bitsIn[ 13 ]
initial
begin
	bitsIn[13] = 1'b0;
end 
// bitsIn[ 12 ]
initial
begin
	bitsIn[12] = 1'b0;
end 
// bitsIn[ 11 ]
initial
begin
	bitsIn[11] = 1'b0;
end 
// bitsIn[ 10 ]
initial
begin
	bitsIn[10] = 1'b0;
end 
// bitsIn[ 9 ]
initial
begin
	bitsIn[9] = 1'b0;
end 
// bitsIn[ 8 ]
initial
begin
	bitsIn[8] = 1'b0;
end 
// bitsIn[ 7 ]
initial
begin
	bitsIn[7] = 1'b0;
end 
// bitsIn[ 6 ]
initial
begin
	bitsIn[6] = 1'b0;
end 
// bitsIn[ 5 ]
initial
begin
	bitsIn[5] = 1'b1;
end 
// bitsIn[ 4 ]
initial
begin
	bitsIn[4] = 1'b0;
end 
// bitsIn[ 3 ]
initial
begin
	bitsIn[3] = 1'b0;
end 
// bitsIn[ 2 ]
initial
begin
	bitsIn[2] = 1'b1;
end 
// bitsIn[ 1 ]
initial
begin
	bitsIn[1] = 1'b1;
end 
// bitsIn[ 0 ]
initial
begin
	bitsIn[0] = 1'b1;
end 
endmodule

